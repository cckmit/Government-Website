package org.konghao.cms.dao;


import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Inject;

import org.dbunit.DatabaseUnitException;
import org.dbunit.dataset.IDataSet;
import org.dbunit.operation.DatabaseOperation;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.konghao.basic.model.Pager;
import org.konghao.basic.test.util.AbstractDbUnitTestCase;
import org.konghao.cms.model.Attachment;
import org.springframework.orm.hibernate4.SessionHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.support.TransactionSynchronizationManager;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("/beans.xml")
public class TestAttachmentDao extends AbstractDbUnitTestCase{
	@Inject
	private SessionFactory sessionFactory;
	
	@Inject
	private IAttachmentDao attachmentDao;
	
	@Before
	public void setUp() throws SQLException, IOException, DatabaseUnitException {
		//此时最好不要使用Spring的Transactional来管理，因为dbunit是通过jdbc来处理connection，再使用spring在一些编辑操作中会造成事务shisu
		Session s = sessionFactory.openSession();
		TransactionSynchronizationManager.bindResource(sessionFactory, new SessionHolder(s));
		this.backupAllTable();
		IDataSet ds = createDateSet("topic");
		DatabaseOperation.CLEAN_INSERT.execute(dbunitCon,ds);
	}
	
	@Test
	public void testFindNoUseAttachment() {
		Pager<Attachment> as = attachmentDao.findNoUseAttachment();
		for(Attachment a:as.getDatas()) {
			System.out.println(a.getId()+","+a.getNewName());
		}
	}
	
	@Test
	public void testClearNoUseAttachment() {
		attachmentDao.clearNoUseAttachment();
		Pager<Attachment> as = attachmentDao.findNoUseAttachment();
		for(Attachment a:as.getDatas()) {
			System.out.println(a.getId()+","+a.getNewName());
		}
	}
	
	@Test
	public void testListByTopic() {
		List<Attachment> as = attachmentDao.listByTopic(1);
		for(Attachment a:as) {
			System.out.println(a.getId()+","+a.getNewName());
		}
	}
	
	@Test
	public void testDeleteByTopic() {
		attachmentDao.deleteByTopic(1);
		List<Attachment> as = attachmentDao.listByTopic(1);
		for(Attachment a:as) {
			System.out.println(a.getId()+","+a.getNewName());
		}
	}
	
	@Test
	public void testListIndexPic() {
		List<Attachment> as = attachmentDao.listIndexPic(4);
		for(Attachment a:as) {
			System.out.println(a.getId()+","+a.getNewName()+","+a.getTopic().getId());
		}
	}
	
	@Test
	public void testFindChannelPic() {
		Pager<Attachment> as = attachmentDao.findChannelPic(7);
		for(Attachment a:as.getDatas()) {
			System.out.println(a.getId()+","+a.getNewName()+","+a.getTopic().getId());
		}
	}
	
	@Test
	public void testListAttachByTopic() {
		List<Attachment> as = attachmentDao.listAttachByTopic(1);
		for(Attachment a:as) {
			System.out.println(a.getId()+","+a.getNewName()+","+a.getTopic().getId());
		}
	}
	
	
	@After
	public void tearDown() throws DatabaseUnitException, SQLException, IOException {
		SessionHolder holder = (SessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);
		Session s = holder.getSession(); 
		s.flush();
		TransactionSynchronizationManager.unbindResource(sessionFactory);
		this.resumeTable();
	}
}
